import pandas as pd
import pickle
import my_functions as fn

df_RFM=pd.read_csv('files/df_RFM.csv')
df_full=pd.read_csv('files/df_full.csv')
df_name=pd.read_csv('files/df_name.csv')
df_now=pd.read_csv('files/df_now.csv')
rfm_agg=pd.read_csv('files/rfm_agg.csv')
df_SoSanhThuatToan=pd.read_csv('files/SoSanhThuatToan.csv',delimiter=';')

df_RFM_TapLuat=pd.read_csv('files/df_RFM_TapLuat.csv')
rfm_agg_TapLuat=pd.read_csv('files/rfm_agg_TapLuat.csv')

df_now_gmm=pd.read_csv('files/df_now_gmm.csv')
rfm_agg_gmm=pd.read_csv('files/rfm_agg_gmm.csv')

kmeans_model=pickle.load(open('models/kmeans_model.pkl', 'rb'))

#-------------------------------------------------------------
def trang_chu(st):
    st.markdown("<h1 style='text-align: center;'>ƒê·ªì √Ån T·ªët Nghi·ªáp<br>Data Science & Machine Learning</h1>", unsafe_allow_html=True)    
    st.markdown("<h2 style='text-align: center;font-weight: bold; color: blue'>ƒê·ªÅ t√†i: Ph√¢n nh√≥m kh√°ch h√†ng</h2>", unsafe_allow_html=True)
    st.image('images/h3_1.png')

# -----------------------------------------------------------------------------------
def yeu_cau_cua_doanh_nghiep(st):
    image_path = "images/CuaHang2.jpg"  # Thay b·∫±ng ƒë∆∞·ªùng d·∫´n c·ªßa b·∫°n
    st.image(image_path, use_container_width=True)     
    fn.yeu_cau_cua_doanh_nghiep(st)

# -----------------------------------------------------------------------------------

def cac_thuat_toan_thu_nghiem(st):
    tab1, tab2, tab3,tab4 = st.tabs(["BI·ªÇU ƒê·ªí PH√ÇN PH·ªêI RFM","T·∫¨P LU·∫¨T", "THU·∫¨T TO√ÅN GMM", "THU·∫¨T TO√ÅN K-MEANS"])   
    with tab1:   
        fn.plot_distribution(st,df_RFM[['Recency']], "Ph√¢n ph·ªëi Recency", "Recency")
        st.divider()
        fn.plot_distribution(st,df_RFM[['Frequency']], "Ph√¢n ph·ªëi Frequency", "Frequency")
        st.divider()
        fn.plot_distribution(st,df_RFM[['Monetary']], "Ph√¢n ph·ªëi Monetary", "Monetary") 
    with tab2:
        st.write("### T·∫≠p Lu·∫≠t chia l√†m 5 nh√≥m") 
        st.write("**T√≠nh gi√° tr·ªã trung b√¨nh RFM cho c√°c nh√≥m**")
        st.markdown(fn.format_table(rfm_agg_TapLuat).to_html(), unsafe_allow_html=True)
        fn.ve_cac_bieu_do(rfm_agg_TapLuat,df_RFM_TapLuat,st,'T·∫≠p lu·∫≠t')
    with tab3:
        st.write("### GMM chia l√†m 5 nh√≥m")
        rfm_agg_gmm.rename(columns={'Cluster':'ClusterName'},inplace=True)
        df_now_gmm.rename(columns={'Cluster':'ClusterName'},inplace=True)
        df_now_gmm['ClusterName']='Cluster '+ df_now_gmm['ClusterName'].astype(str)
        st.markdown(fn.format_table(rfm_agg_gmm).to_html(), unsafe_allow_html=True)
        fn.ve_cac_bieu_do(rfm_agg_gmm,df_now_gmm,st,'GMM')
    with tab4:
        st.write("### KMeans v·ªõi k=6 ,chia l√†m 6 nh√≥m")
        st.markdown(fn.format_table(rfm_agg).to_html(), unsafe_allow_html=True)
        fn.ve_cac_bieu_do(rfm_agg,df_now,st,'KMeans')         

  

# -----------------------------------------------------------------------------------
def lua_chon_ket_qua(st):
    st.markdown("<h2 style='text-align: center;'>Ch·ªçn thu·∫≠t to√°n K-Means ƒë·ªÉ l√†m th·ª≠ nghi·ªám ph√¢n nh√≥m kh√°ch h√†ng</h2>", unsafe_allow_html=True) 
    st.markdown("<h3 style='text-align: center;font-weight: bold; color: blue'>S·ª≠ d·ª•ng k=6 -> Chia th√†nh 6 nh√≥m</h3>", unsafe_allow_html=True)    

    tab1, tab2,tab3 = st.tabs(["B·∫¢NG SO S√ÅNH C√ÅC THU·∫¨T TO√ÅN","C√ÅC PH√ÇN KH√öC KH√ÅCH H√ÄNG", "TOP 3 S·∫¢N PH·∫®M/NH√ìM S·∫¢N PH·∫®M"])   
    with tab1:
        st.write("**B·∫£ng so s√°nh c√°c thu·∫≠t to√°n**")
        fn.so_sanh_cac_thuat_toan(st,df_SoSanhThuatToan)
        st.divider()
        fig_scatter_3d_data=fn.truc_quan_hoa_scatter_3d_data(df_now,'KMeans')
        st.plotly_chart(fig_scatter_3d_data) 
        st.divider()
        st.write("""
                 **T·ª´ bi·ªÉu ƒë·ªì scatter 3D cho th·∫•y**
                 - C√°c c·ª•m kh√°ch h√†ng ƒë∆∞·ª£c ph√¢n t√°ch r√µ r√†ng
                 - Kh√¥ng ch·ªìng l·∫•n  
                 - Ph√¢n t√°n ƒë·ªìng ƒë·ªÅu

                 **T·ª´ b·∫£ng so s√°nh ta c·∫ßn m·ªôt thu·∫≠t to√°n:**
                 - C√≥ t·ªëc ƒë·ªô nhanh, ƒë∆°n gi·∫£n
                 - D·ªÖ t√≠nh to√°n v√† ki·ªÉm tra

                 -> Ta nh·∫≠n th·∫•y r·∫±ng K-Means l√† thu·∫≠t to√°n kh√° ph√π h·ª£p trong tr∆∞·ªùng h·ª£p n√†y                 
                 """)       

        st.markdown("<h4 style='text-align: center; color:'>Ch·ªçn <span style='color: blue;'>K-Means</span> l√†m thu·∫≠t to√°n ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng</h4>", unsafe_allow_html=True) 
    with tab2:
        fig=fn.truc_quan_hoa_treemap(rfm_agg,'KMeans')
        st.plotly_chart(fig)
        st.write("##### Gi·∫£i th√≠ch ClusterName:")
        fn.giai_thich_ClusterName(st,'Diamond Customers')
        fn.giai_thich_ClusterName(st,'Loyal Customers')
        fn.giai_thich_ClusterName(st,'Regular Customers')
        fn.giai_thich_ClusterName(st,'Potential Customers')
        fn.giai_thich_ClusterName(st,'New Customers')
        fn.giai_thich_ClusterName(st,'Lost Customers')  
    with tab3:
        top_products_per_cluster, top_category_per_cluster, top_products_amount_per_cluster=fn.get_top_products_cluster_info(df_full,3)

        fig1=fn.draw_top_products_cluster_info(
            y='items',
            ylabel='S·ªë l∆∞·ª£ng b√°n',
            hue='productName',
            title='Top 3 s·∫£n ph·∫©m (Product) c√≥ s·ªë l∆∞·ª£ng b√°n l·ªõn nh·∫•t trong m·ªói Cluster',
            legend_title='S·∫£n ph·∫©m',
            data=top_products_per_cluster)
        fig1.update_layout(height=500)
        st.plotly_chart(fig1)
        st.divider()

        fig2=fn.draw_top_products_cluster_info(
            y='items',
            ylabel='S·ªë l∆∞·ª£ng b√°n',
            hue='Category',
            title='Top 3 nh√≥m s·∫£n ph·∫©m (Category) c√≥ s·ªë l∆∞·ª£ng b√°n l·ªõn nh·∫•t trong m·ªói Cluster',
            legend_title='Nh√≥m s·∫£n ph·∫©m',
            data=top_category_per_cluster)     
        fig2.update_layout(height=500) 
        st.plotly_chart(fig2)
        st.divider()             

        fig3=fn.draw_top_products_cluster_info(
            y='amount',
            ylabel='T·ªïng amount',
            hue='productName',
            title='Top 3 s·∫£n ph·∫©m (Product) c√≥ t·ªïng gi√° b√°n (amount) l·ªõn nh·∫•t trong m·ªói Cluster',
            legend_title='S·∫£n ph·∫©m',
            data=top_products_amount_per_cluster)  
        fig3.update_layout(height=500)
        st.plotly_chart(fig3)             
        st.divider()
     
# -----------------------------------------------------------------------------------
def ung_dung_phan_nhom(st):   
    st.write("### üìàD·ª± ƒëo√°n v√† Ph√¢n nh√≥m Kh√°ch h√†ng")   
    status = st.radio("**Ch·ªçn c√°ch nh·∫≠p th√¥ng tin kh√°ch h√†ng:**", ("üÜîNh·∫≠p id kh√°ch h√†ng l√† th√†nh vi√™n c·ªßa c·ª≠a h√†ng:", "üìäNh·∫≠p RFM c·ªßa kh√°ch h√†ng:","üì§Upload file ch·ª©a th√¥ng tin m√£ kh√°ch h√†ng c√πng v·ªõi RFM:"))   

    st.write(f'**{status}**')
    if status=="üÜîNh·∫≠p id kh√°ch h√†ng l√† th√†nh vi√™n c·ªßa c·ª≠a h√†ng:":
        list_customers=fn.get_list_customers(df_full)   
        fn.select_one_customers_by_id(list_customers,df_full,st)        
    elif status=='üìäNh·∫≠p RFM c·ªßa kh√°ch h√†ng:':                
        fn.select_one_customers_by_RFM(df_full,df_name,kmeans_model,st)
    elif status=='üì§Upload file ch·ª©a th√¥ng tin m√£ kh√°ch h√†ng c√πng v·ªõi RFM:':    
        st.write("**‚è¨Download file m·∫´u t·∫°i ƒë√¢y:**")  
        fn.download_file(st,'files/file_mau.csv')
        st.write("**‚è´Upload file ƒë·ªÉ ph√¢n nh√≥m t·∫°i ƒë√¢y:**")        
        fn.upload_customers_file(st,kmeans_model,df_name) 

# ===================================================================================
if __name__ == "__main__":
    pass    